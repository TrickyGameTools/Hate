// License Information:
// Neil_Libs/Hate.neilbundle/Parts/Import.Neil
// Import
// version: 22.07.15
// Copyright (C) 2022 Jeroen P. Broks
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information

Var _conditions
Var _Imported
Init
	_conditions = {}
End

Var _XDir(string f)
	Var sf = Split(f,"/")
	If #sf==1
		Return ""
	End
	return Left(f,#f-#sf[#sf]-1)
End

Var _Import(string dir,string file)
	_Imported = _Imported || {}
	if _Imported[dir:upper().."::"..file:upper()] 
		print(file," already present. Instant return")
		Return _Imported[dir:upper().."::"..file:upper()]
	end
	if suffixed(file:upper(),".LHL")
		return _Import(dir,file.."/"..replace(file:upper(),".LHL",".LUA"))
	end
	String Own = sprintf("%s/%s",dir,file)
	String HTe = sprintf("Libs/Hate.NeilBundle/Hate/%s",file)
	String UseFile
	If dir==""
		Own = file
	End
	Var Lines
	String MyDir
	if dir:upper()!="HOME"
		for F in each{Own,HTe}
			cout("Checking: ",F,"\n")
			if JCR6.EntryExists(F)
				print("= Loading")
				Lines = JCR6.LoadLines(F)
				MyDir = _XDir(F)
				break
			end
		end
	end
	If (!Lines) && HomeFile.Exists(file)
		cout("Home Loading: ",file,"\n")
		Lines = HomeFile.LoadLines(file)
	End
	Lua.assert(Lines,"Unable to read "..file.." in any way")
	string Code
	print("= Pre-processing")
	bool condout
	For ln,l in ipairs(Lines)
		If condout
			code+="-- "
		End
		string lt = trim(l)
		If prefixed(lt,"-- *")
			Var CD = Split(lt," ")			
			Switch CD[2]:lower()
				Case "*import"
					//print("Checking: ",CD[3]..".lua")
					if JCR6.EntryExists(dir.."/"..CD[3]..".lua")
						code += sprintf("%s = Neil.Globals.Hate.Import('%s','%s.lua')\n",CD[3],dir,CD[3])
					Else	
						code += sprintf("%s = Neil.Globals.Hate.Import('%s','%s.lhl')\n",CD[3],dir,CD[3])
					End
					
				Case "*define" 
					code += "-- DEFINED: "..CD[3]
					_conditions[CD[3]:upper()]=true
				Case "*undef"
					code += "-- UNDEFINED: "..CD[3]
					_conditions[CD[3]:upper()]=nil
				case "*if"
					code +="-- if\n" 
					bool allow=true
					for i,k in ipairs(CD)
						if i>2
							allow = allow && (_conditions[k:upper()]==true)
						end
					end
					condout=!allow
				case "*endif" "*fi"
					condout=false
					code += "-- fi\n"
				Default 
					Lua.error("Unknown hate preprocccssor directive: "..CD[2].." in line #"..ln)
			End
		Else
			//string nl = replace(l,"\\$\\$mydir\\$\\$",MyDir).."\n"
			string nl = ""
			int i=1
			repeat				
				//print(i,(i+9<#l) , mid(l,i,9):upper(),mid(l,i,9):upper()=="$$MYDIR$$",(i+9<#l) && mid(l,i,9):upper()=="$$MYDIR$$") // debug only
				if (i+9<#l) && mid(l,i,9):upper()=="$$MYDIR$$"
					nl+=MyDir
					i+=9
				elseif mid(l,i,1)!="\n" && mid(l,i,1)!="\r"
					nl+=mid(l,i,1)
					i++
				else
					i+=(#l)
				end
			loopwhile i<=#l
			// print("New Line>",ln,nl) // debug only!
			code += nl.."\n"
		End
	End
	Lua.assert(!condout,"Unclosed *if")
	Var Loaded
	Var Err
	print("= Compiling")
	// print(code) // debug only!
	Loaded,Err = Lua.load(code,file)
	Lua.assert(Loaded,"Hate Import error: "..Lua.tostring(Err))
	print("= Iniiatlizing")
	Var Ret = Loaded()
	print("= Complete")
	_Imported[dir:upper().."::"..file:upper()] = Ret
	Return Ret
End

Return _Import