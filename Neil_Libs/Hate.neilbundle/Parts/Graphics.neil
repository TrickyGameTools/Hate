// License Information:
// Neil_Libs/Hate.neilbundle/Parts/Graphics.neil
// Graphics
// version: 22.07.22
// Copyright (C) 2022 Jeroen P. Broks
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information


class __Hate_Image
	ReadOnly Var Img
	ReadOnly Var Font
	ReadOnly string Type
	
	Int getWidth(a)
		return (a || self).Width
	End

	Int getHeight(a)
		return (a || self).Height
	End
	
	Get int Width
		switch Type
			case "Image"
				Return Img.Width
			case "Text"
				Return Font.TextWidth(Img)
			Default
				Return 0
		End
	End
	
	Get Int Height
		switch Type
			case "Image"
				Return Img.Height
			case "Text"
				Return Font.TextHeight(Img)
			Default
				Return 0
		End
	End
		

	
	Constructor (_Img,_Fnt)
		Img = _Img
		if Lua.type(Img)=="string"
			Type="Text"
			Font = _Fnt
			print("Created text: ",Img,";",Font)
		Else
			Type="Image"
		End
	End
end	


Module
	ReadOnly Delegate Line = Graphics.Line
	
	Void setColor(number r, number g, number b) 
		Graphics.Color(math.floor(r) % 256,math.floor(g) % 256,math.floor(b) % 256)
	End
	
	ReadOnly Delegate Clear = Graphics.Cls
	
	Get Delegate newFont
		Return Hate.Font.newFont
	End
	
	Get Var ChosenFont
		Return Hate.Font.ChosenFont
	End
	
	Int getWidth()
		return Screen.W
	end
	
	Int getHeight()
		return Screen.H
	End
	
	Void draw( drawable,number x, number y, number r=0, number sx=1, number sy=1, number ox=0, number oy=0, number kx=0, number ky=0 )
		switch drawable.type
			case "Image"
				GFX_Rotation.Rad=r
				Graphics.Scale(sx,sy)
				drawable.img.hot(ox,oy)
				drawable.img.xdraw(x,y)
			case "Text"
				//print("Using Font: ",drawable.Font) // Debug only!
				drawable.Font.Text(drawable.Img,x-ox,y-oy)
			default
				Self.Print("??? DRAWABLE ???",x,y)
		end
	End
	
	void Rectangle(string t,number x, number y, number w, number h)
		Graphics.Rect(math.floor(x),math.floor(y),math.floor(w),math.floor(h),t!="fill")
	end
	
	Void Print(string text, number x, number y, r, sx, sy, ox, oy, kx, ky )
		// Note r, sx, sy, ox, oy, kx and ky are not supposrted
		ChosenFont.IFont.Text(Text,math.floor(x),math.floor(y))
	End
	
	Void setFont(fnt)
		Hate.Font.ChosenFont = fnt
	End
	
	Var newImage( string filename, settings )
		return new __Hate_Image(Image.LoadNew(filename,"HATE_IMAGE_"..(filename:upper())))
	End
	
	Var newText(fnt, string txt)
		Return new __Hate_Image(txt,fnt)
	End
	
	ReadOnly Delegate Present = Graphics.Flip
	
End